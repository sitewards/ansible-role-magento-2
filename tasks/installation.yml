---
# The install process creates a zero delay release. It works roughly as follows:
# 1. Pull down the release
# 2. Unpack it
# 3. Set any state that it needs (env.php, for example)
# 4. Move it to the release dir
# 5. Update the currently deployed application to the new application
#
# Other files in this playbook then handle database migrations.

- name: "Determine if the release already exists"
  stat:
    path: "{{ magento_release_folder }}/{{ magento_release_version }}"
  register: "magento_release_stat"

# If cron executes Magento during release, it can create sessions / cache and break stuff
- name: "Ensure the cron is disabled"
  cron:
    name: "{{ item.name }}"
    user: "{{ magento_user }}"
    minute: "{{ item.minute }}"
    hour: "{{ item.hour }}"
    day: "{{ item.day }}"
    month: "{{ item.month }}"
    job: "{{ magento_cron_invoker }} {{ item.job }}; {{ magento_cron_responder }}"
    disabled: "yes"
  with_items: "{{ magento_cron_tasks }}"

- name: "Wait untill eventually running cron is finished"
  become: "yes"
  become_user: "{{ magento_user }}"
  command: "flock /run/lock/{{ item.code }}.lock echo '{{ item.code }} has finished.'"
  with_items: "{{ magento_cron_tasks }}"

- name: "Get the magento filename from the storage path"
  set_fact:
    magento_storage_file_name: "{{ magento_storage_file_path | basename }}"
  when:
    - not magento_release_stat.stat.exists
    - magento_skip_release == False

- name: "Create a workdir for the release"
  tempfile:
    state: "directory"
    prefix: "magento-release."
  register: "tmpdir"
  when:
    - not magento_release_stat.stat.exists
    - magento_skip_release == False

- name: "Set the workdir for later tasks"
  set_fact:
    magento_workdir: "{{ tmpdir.path }}"
  when:
    - not magento_release_stat.stat.exists
    - magento_skip_release == False

- name: "Download Magento release"
  include: "download-from/{{ magento_release_storage_provider }}.yml"

- name: "Unpack the release"
  unarchive:
    src: "{{ magento_workdir }}/{{ magento_storage_file_name }}"
    dest: "{{ magento_workdir }}"
    remote_src: true
  when:
    - not magento_release_stat.stat.exists
    - magento_skip_release == False

- name: "Clean up the downloaded archive"
  file:
    path: "{{ magento_workdir }}/{{ magento_storage_file_name }}"
    state: "absent"
  when:
    - not magento_release_stat.stat.exists
    - magento_skip_release == False

- name: "Set the permission on the release"
  shell: "chown -R {{ magento_user }}:{{ magento_group }} {{ magento_workdir }}"
  when:
    - not magento_release_stat.stat.exists
    - magento_skip_release == False

- name: "Move the release to the releases folder"
  shell: "mv {{ magento_workdir }} {{ magento_release_folder }}/{{ magento_release_version }}"
  args:
    creates: "{{ magento_release_folder }}/{{ magento_release_version }}"
    removes: "{{ magento_workdir }}"
  when:
    - not magento_release_stat.stat.exists
    - magento_skip_release == False

- name: "Generate env.php"
  template:
    src: "etc/env.php.j2"
    dest: "{{ magento_config_folder }}/env.php"
    owner: "{{ magento_user }}"
    group: "{{ magento_group }}"
    mode: "u=rw,g=,o="

- name: "Ensure the source content exists"
  file:
    path: "{{ item.src }}"
    state: "{{ item.type | default('directory') }}"
    owner: "{{ item.owner | default(magento_user) }}"
    group: "{{ item.group | default(magento_group) }}"
    mode: "{{ item.mode | default('755') }}"
  with_items: "{{ magento_shared_folders }}"

# This catches a condition in which the destionation path will be in a folder that currently does not exist. Symlinks
# cannot be created in directories that do not exist yet. An example of this would be
#
# var/sitewards/path/to/resource
#
# where "sitewards/path/to" does not exist.
- name: "Ensure the destination container directories exist"
  file:
    path: "{{ magento_release_folder }}/{{ magento_release_version }}/{{ item.dest | dirname }}"
    state: "directory"
    owner: "{{ magento_user }}"
    group: "{{ magento_group }}"
  with_items: "{{ magento_shared_folders }}"
  # We do not want to overwrite any resources that already exist (such as the symlink to /var/www/html). However, if
  # the resource does not exist, we need to create it. Thus, we attempt its creation, but ignore failures.
  failed_when: false

- name: "Delete the destinations if they exist"
  file:
    path: "{{ magento_release_folder }}/{{ magento_release_version }}/{{ item.dest }}"
    state: "absent"
  with_items: "{{ magento_shared_folders }}"

- name: "Ensure the symlinks for the shared content exist"
  file:
    src: "{{ item.src }}"
    path: "{{ magento_release_folder }}/{{ magento_release_version }}/{{ item.dest }}"
    owner: "{{ magento_user }}"
    group: "{{ magento_group }}"
    state: "{{ item.state | default('link') }}"
  with_items: "{{ magento_shared_folders }}"

- name: "Enable maintenance mode"
  file:
    path: "{{ magento_release_folder }}/{{ magento_release_version }}/var/.maintenance.flag"
    owner: "{{ magento_user }}"
    group: "{{ magento_group }}"
    state: "touch"
  when:
    - magento_skip_release == False

- name: "Release the application"
  file:
    src: "{{ magento_release_folder }}/{{ magento_release_version }}"
    force: "yes"
    path: "{{ magento_app_root }}"
    owner: "{{ magento_user }}"
    group: "{{ magento_group }}"
    state: "link"
  register: "magento_release_updated"
  when:
    - magento_skip_release == False
- name: "Reload the PHP runtime"
  service:
    name: "{{ magento_php_service }}"
    state: "restarted"
  when:
    - magento_release_updated.changed
    - magento_skip_release == False

- name: "Check if Magento database exists"
  shell:
    cmd: |
      mysql --user="{{ magento_config_db.username }}" --password="{{ magento_config_db.password }}" --database="{{ magento_config_db.name }}" --host="{{ magento_config_db.host }}" <<EOF
        SHOW TABLES LIKE 'core_config_data';
      EOF
  register: magento_db_status

- name: "Create the Magento database if missing"
  become: "yes"
  become_user: "{{ magento_user }}"
  command: "/usr/bin/php {{ magento_app_root }}/bin/magento setup:db-schema:upgrade"
  when: magento_db_status.stdout_lines|length == 0

- name: "Enforce core configuration data"
  shell:
    cmd: |
      mysql --user="{{ magento_config_db.username }}" --password="{{ magento_config_db.password }}" --database="{{ magento_config_db.name }}" --host="{{ magento_config_db.host }}" <<EOF
        INSERT INTO core_config_data (path, scope, scope_id, value)
          VALUES (
             '{{ item.path }}',
             '{{ item.scope }}',
             {{ item.scope_id }},
             '{{ item.value | regex_replace('\[\[', '{{') | regex_replace('\]\]', '}}') }}'
          )
          ON DUPLICATE KEY UPDATE
             value = '{{ item.value | regex_replace('\[\[', '{{') | regex_replace('\]\]', '}}') }}'
          ;
      EOF
  with_items: "{{ magento_core_config_data }}"

- name: "Perform any schema upgrades that are required"
  become: "yes"
  become_user: "{{ magento_user }}"
  # "--keep-generated" is used as it's the responsibility of the build environment to do the application compilation.
  command: "/usr/bin/php {{ magento_app_root }}/bin/magento {{ item }}"
  with_items: "{{ magento_upgrade_commands }}"

- name: "Configure webSSO"
  become: "yes"
  become_user: "{{ magento_user }}"
  command: "/usr/bin/php {{ magento_app_root }}/bin/magento websso:configure"
  when: magento_sso_oauth_credentials is defined

- name: "Flush the Magento caches"
  become: "yes"
  become_user: "{{ magento_user }}"
  command: "/usr/bin/php {{ magento_app_root }}/bin/magento cache:flush"

- name: "Let Magento indexer run asynchronously"
  become: "yes"
  become_user: "{{ magento_user }}"
  command: "/usr/bin/php {{ magento_app_root }}/bin/magento indexer:reindex"
  when: (magento_db_status.stdout_lines|length == 0 or magento_force_reindex_on_deploy == True) and magento_allow_async_reindex
  async: 600
  poll: 0

- name: "Let Magento indexer run synchronously"
  become: "yes"
  become_user: "{{ magento_user }}"
  command: "/usr/bin/php {{ magento_app_root }}/bin/magento indexer:reindex"
  when: (magento_db_status.stdout_lines|length == 0 or magento_force_reindex_on_deploy == True) and (not magento_allow_async_reindex)

- name: "Disable maintenance mode"
  file:
    path: "{{ magento_release_folder }}/{{ magento_release_version }}/var/.maintenance.flag"
    owner: "{{ magento_user }}"
    group: "{{ magento_group }}"
    state: "absent"
  when:
    - magento_skip_release == False

- name: "Ensure the cron job is enabled"
  cron:
    name: "{{ item.name }}"
    user: "{{ magento_user }}"
    minute: "{{ item.minute }}"
    hour: "{{ item.hour }}"
    day: "{{ item.day }}"
    month: "{{ item.month }}"
    job: "{{ magento_cron_invoker }} {{ item.job }}; {{ magento_cron_responder }}"
    disabled: "no"
  with_items: "{{ magento_cron_tasks }}"
